[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "SimpleTestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "activity",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "createRoom",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "deleteMsg",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "deleteRoom",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "editMsg",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "editUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "home",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "loginUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "logoutUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "room",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "topics",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "updateRoom",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "userProfile",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "home",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "logoutUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "isExtraImport": true,
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "isExtraImport": true,
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "isExtraImport": true,
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "isExtraImport": true,
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Topic",
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "isExtraImport": true,
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "cloudinary_storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary_storage",
        "description": "cloudinary_storage",
        "detail": "cloudinary_storage",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0001_initial",
        "description": "baseApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "baseApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0002_user_bio_user_name_alter_user_email",
        "description": "baseApp.migrations.0002_user_bio_user_name_alter_user_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='bio',\n            field=models.TextField(max_length=500, null=True),\n        ),",
        "detail": "baseApp.migrations.0002_user_bio_user_name_alter_user_email",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0003_message_likes_user_avatar",
        "description": "baseApp.migrations.0003_message_likes_user_avatar",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0002_user_bio_user_name_alter_user_email'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='message',\n            name='likes',\n            field=models.ManyToManyField(related_name='message_like', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "baseApp.migrations.0003_message_likes_user_avatar",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0004_alter_user_avatar",
        "description": "baseApp.migrations.0004_alter_user_avatar",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0003_message_likes_user_avatar'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='avatar',\n            field=models.FileField(default='avatar.svg', null=True, upload_to='chatBuddy_image_storage'),\n        ),",
        "detail": "baseApp.migrations.0004_alter_user_avatar",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0005_message_save_message_unlikes",
        "description": "baseApp.migrations.0005_message_save_message_unlikes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0004_alter_user_avatar'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='message',\n            name='save',\n            field=models.ManyToManyField(related_name='save_message', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "baseApp.migrations.0005_message_save_message_unlikes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0006_rename_save_message_savemsg",
        "description": "baseApp.migrations.0006_rename_save_message_savemsg",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0005_message_save_message_unlikes'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='message',\n            old_name='save',\n            new_name='saveMsg',\n        ),",
        "detail": "baseApp.migrations.0006_rename_save_message_savemsg",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0007_alter_message_likes_alter_message_savemsg_and_more",
        "description": "baseApp.migrations.0007_alter_message_likes_alter_message_savemsg_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0006_rename_save_message_savemsg'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='message',\n            name='likes',\n            field=models.ManyToManyField(blank=True, related_name='message_like', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "baseApp.migrations.0007_alter_message_likes_alter_message_savemsg_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0008_remove_message_savemsg_remove_message_unlikes",
        "description": "baseApp.migrations.0008_remove_message_savemsg_remove_message_unlikes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0007_alter_message_likes_alter_message_savemsg_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='message',\n            name='saveMsg',\n        ),\n        migrations.RemoveField(",
        "detail": "baseApp.migrations.0008_remove_message_savemsg_remove_message_unlikes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "baseApp.migrations.0009_alter_user_bio",
        "description": "baseApp.migrations.0009_alter_user_bio",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('baseApp', '0008_remove_message_savemsg_remove_message_unlikes'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='bio',\n            field=models.TextField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "baseApp.migrations.0009_alter_user_bio",
        "documentation": {}
    },
    {
        "label": "TestUrls",
        "kind": 6,
        "importPath": "baseApp.tests.test_urls",
        "description": "baseApp.tests.test_urls",
        "peekOfCode": "class TestUrls(SimpleTestCase):\n    def test_home_url_resolves(self):\n        home_url = reverse(\"home\")\n        self.assertEquals(resolve(home_url).func, home)\n    def test_login_url_resolves(self):\n        login_url = reverse(\"login\")\n        self.assertEquals(resolve(login_url).func, loginUser)\n    def test_register_url_resolves(self):\n        register_url = reverse(\"register\")\n        self.assertEquals(resolve(register_url).func, registerUser)",
        "detail": "baseApp.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestViews",
        "kind": 6,
        "importPath": "baseApp.tests.test_views",
        "description": "baseApp.tests.test_views",
        "peekOfCode": "class TestViews(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.home_url = reverse('home')\n        self.userProfile = reverse('profile', args=[1])\n        self.user1 = User.objects.create(\n            name = 'Ahmed',\n            email = 'ahmed@gmail.com'\n        )\n        self.topics_url = reverse('topics')",
        "detail": "baseApp.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BaseappConfig",
        "kind": 6,
        "importPath": "baseApp.apps",
        "description": "baseApp.apps",
        "peekOfCode": "class BaseappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'baseApp'",
        "detail": "baseApp.apps",
        "documentation": {}
    },
    {
        "label": "RoomForm",
        "kind": 6,
        "importPath": "baseApp.form",
        "description": "baseApp.form",
        "peekOfCode": "class RoomForm(ModelForm):\n    class Meta:\n        model = Room\n        fields = '__all__'\n        exclude = ['host', 'participants']\nclass UserForm(ModelForm):\n    class Meta:\n        model = User\n        fields = [\"avatar\", \"username\", \"email\" ]\nclass RegistrationForm(UserCreationForm):",
        "detail": "baseApp.form",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "baseApp.form",
        "description": "baseApp.form",
        "peekOfCode": "class UserForm(ModelForm):\n    class Meta:\n        model = User\n        fields = [\"avatar\", \"username\", \"email\" ]\nclass RegistrationForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ['name','username', 'email', \"password1\", 'password2']",
        "detail": "baseApp.form",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "baseApp.form",
        "description": "baseApp.form",
        "peekOfCode": "class RegistrationForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ['name','username', 'email', \"password1\", 'password2']",
        "detail": "baseApp.form",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "peekOfCode": "class User(AbstractUser):\n    name = models.CharField(max_length=200, null=True)\n    email = models.EmailField(unique=True, null=True)\n    bio = models.TextField(max_length=500, null=True, blank=True)\n    avatar = models.FileField(\n        upload_to=\"chatBuddy_image_storage\", default=\"avatar.svg\", null=True\n    )\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = []\nclass Topic(models.Model):",
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Topic",
        "kind": 6,
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "peekOfCode": "class Topic(models.Model):\n    name = models.CharField(max_length=200)\n    def __str__(self):\n        return self.name\nclass Room(models.Model):\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True)\n    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    participants = models.ManyToManyField(User, related_name=\"participants\", blank=True)\n    name = models.CharField(max_length=200)\n    description = models.TextField(null=True, blank=True)",
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "peekOfCode": "class Room(models.Model):\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True)\n    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    participants = models.ManyToManyField(User, related_name=\"participants\", blank=True)\n    name = models.CharField(max_length=200)\n    description = models.TextField(null=True, blank=True)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.name",
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "baseApp.models",
        "description": "baseApp.models",
        "peekOfCode": "class Message(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n    msgBody = models.TextField()\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n    likes = models.ManyToManyField(User, related_name=\"message_like\", blank=True)\n    class Meta:\n        ordering = [\"-updated\", \"-created\"]\n    def __str__(self):",
        "detail": "baseApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "baseApp.urls",
        "description": "baseApp.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register\", views.registerUser, name=\"register\"),\n    path(\"login\", views.loginUser, name=\"login\"),\n    path(\"logout\", views.logoutUser, name=\"logout\"),\n    path(\"\", views.home, name=\"home\"),\n    path(\"room/<int:idParam>/\", views.room, name=\"room\"),\n    path(\"profile/<str:id>\", views.userProfile, name=\"profile\"),\n    path(\"create_room\", views.createRoom, name=\"createRoom\"),\n    path(\"update_room/<int:id>\", views.updateRoom, name=\"updateRoom\"),\n    path(\"delete_room/<int:id>\", views.deleteRoom, name=\"deleteRoom\"),",
        "detail": "baseApp.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def home(request):\n    query = request.GET.get('q') if request.GET.get('q') != None else \"\"\n    rooms = Room.objects.filter(Q(topic__name__icontains=query) | Q(name__icontains=query) | Q(host__username__icontains=query) | Q(description__icontains=query))\n    fullTopics = Topic.objects.all()\n    topics = Topic.objects.all()[0:5]\n    room_count = rooms.count()\n    activityMsg = Message.objects.filter(Q(room__topic__name__icontains = query))\n    for index, topic in enumerate(fullTopics):\n        if topic.room_set.count() == 0:\n            ftopic = Topic.objects.get(id = topic.id)",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def room(request, idParam):\n    room = Room.objects.get(id=idParam)\n    room_messages = room.message_set.all().order_by('-created')\n    participants = room.participants.all()\n    context = {\"room\": room, 'room_messages':room_messages, \"participants\":participants}\n    if request.method == 'POST':\n        message = Message.objects.create(\n            user = request.user,\n            room = room,\n            msgBody = request.POST.get('msgBody')",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "userProfile",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def userProfile(request, id):\n    user = User.objects.get(id=id)\n    rooms = user.room_set.all()\n    activeityMessages = user.message_set.all()\n    topics = Topic.objects.all()\n    context = {\"user\":user, \"rooms\":rooms, \"topics\":topics, \"activeityMessages\":activeityMessages}\n    return render(request, \"base/profile.html\", context)\ndef topics(request):\n    query = request.GET.get('q') if request.GET.get('q') != None else ''\n    topics = Topic.objects.filter(name__icontains=query)",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "topics",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def topics(request):\n    query = request.GET.get('q') if request.GET.get('q') != None else ''\n    topics = Topic.objects.filter(name__icontains=query)\n    return render(request, 'base/topics.html', {\"topics\":topics})\ndef activity(request):\n    room_messages = Message.objects.all()\n    return render(request, 'base/activity.html', {\"room_messages\":room_messages})\ndef loginUser(request):\n    if request.user.is_authenticated:\n        return redirect('home')",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "activity",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def activity(request):\n    room_messages = Message.objects.all()\n    return render(request, 'base/activity.html', {\"room_messages\":room_messages})\ndef loginUser(request):\n    if request.user.is_authenticated:\n        return redirect('home')\n    if request.method == \"POST\":\n        email = request.POST.get('email').lower()\n        password = request.POST.get('password')\n        try:",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "loginUser",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def loginUser(request):\n    if request.user.is_authenticated:\n        return redirect('home')\n    if request.method == \"POST\":\n        email = request.POST.get('email').lower()\n        password = request.POST.get('password')\n        try:\n            user = User.objects.get(username = eamil)\n        except:\n            messages.error(request, \"User does not exist\")",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def registerUser(request):\n    form = RegistrationForm()\n    room = Room.objects.all()\n    if request.method == 'POST':\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            user.email = user.email.lower()\n            user.save()\n            login(request,user)",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "logoutUser",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def logoutUser(request):\n    logout(request)\n    return redirect('home')\n@login_required(login_url=\"login\")\ndef createRoom (request):\n    form = RoomForm()\n    topics = Topic.objects.all()\n    if request.method == \"POST\":\n        topic_name = request.POST.get(\"topic\")\n        topic, created = Topic.objects.get_or_create(name = topic_name)",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "createRoo",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def createRoom (request):\n    form = RoomForm()\n    topics = Topic.objects.all()\n    if request.method == \"POST\":\n        topic_name = request.POST.get(\"topic\")\n        topic, created = Topic.objects.get_or_create(name = topic_name)\n        room = Room.objects.create(\n            host = request.user,\n            name = request.POST.get('name'),\n            topic = topic,",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "updateRoom",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def updateRoom(request, id):\n    room = Room.objects.get(id = id)\n    form = RoomForm(instance=room )\n    topics = Topic.objects.all()\n    if request.user != room.host:\n        return HttpResponse(\"You are not allowed to perform this operation\")\n    if request.method == \"POST\":\n        topic_name = request.POST.get('topic')\n        topic, created = Topic.objects.get_or_create(name =  topic_name)\n        room.topic = topic",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "deleteRoom",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def deleteRoom(request, id):\n    room = Room.objects.get(id = id)\n    if request.user != room.host:\n        return HttpResponse(\"You are not allowed to perform this operation\")\n    if request.method == 'POST':\n        room.delete()\n        return redirect('home')\n    return render(request, 'base/delete.html', {\"obj\":room})\n@login_required(login_url=\"login\")\ndef deleteMsg(request, id):",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "deleteMsg",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def deleteMsg(request, id):\n    message = Message.objects.get(id = id)\n    if request.user != message.user:\n        return HttpResponse(\"You are not allowed to perform this operation\")\n    if request.method == 'POST':\n        message.delete()\n        return redirect('home')\n    return render(request, 'base/delete.html', {\"obj\":message})\n@login_required(login_url=\"login\")\ndef editMsg(request, id):",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "editMsg",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def editMsg(request, id):\n    room = Room.objects.get(id=id)\n    message = Message.objects.get(id = id)\n    if request.user != message.user:\n        return HttpResponse(\"You are not allowed to perform this operation\")\n    if request.method == \"POST\":\n          message.msgBody = request.POST.get('msgBody')\n          message.save()\n          return redirect('room', idParam = room.id)\n    return render(request, 'base/edit.html', {\"obj\":message})",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "editUser",
        "kind": 2,
        "importPath": "baseApp.views",
        "description": "baseApp.views",
        "peekOfCode": "def editUser(request):    \n    user = request.user\n    form = UserForm(instance=user)\n    if request.method == 'POST':\n        form = UserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            return redirect('profile', id = user.id)\n    return render(request, 'base/editProfile.html', {\"form\":form})\n# @login_required(login_url='login')",
        "detail": "baseApp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chatBuddy.asgi",
        "description": "chatBuddy.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "chatBuddy.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-918jrgnqc3r)^(0v1i2wim=j(ue+ut5(2li+q*%5!+mvb9((yy'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-918jrgnqc3r)^(0v1i2wim=j(ue+ut5(2li+q*%5!+mvb9((yy'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    #Telling our app that there is a baseApp to be connected to",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    #Telling our app that there is a baseApp to be connected to\n    'baseApp.apps.BaseappConfig',\n    'cloudinary',",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'chatBuddy.urls'",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "ROOT_URLCONF = 'chatBuddy.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / \"templates\",\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / \"templates\",\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "WSGI_APPLICATION = 'chatBuddy.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS =[\n    BASE_DIR / 'static'\n]",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS =[\n    BASE_DIR / 'static'\n]\n# Default primary key field type",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS =[\n    BASE_DIR / 'static'\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS =[\n    BASE_DIR / 'static'\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n# cloudinary.config( ",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS =[\n    BASE_DIR / 'static'\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n# cloudinary.config( \n#   cloud_name = \"dkxqtaezm\", \n#   api_key = \"265648568798256\", \n#   api_secret = \"HA5YMVO2vgSdMIjTu-gednIxO7I\" ",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCLOUDINARY_STORAGE={\n    'CLOUD_NAME' :'dkxqtaezm', \n    'API_KEY' : '265648568798256', \n    'API_SECRET' : \"HA5YMVO2vgSdMIjTu-gednIxO7I\" \n}\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "chatBuddy.settings",
        "description": "chatBuddy.settings",
        "peekOfCode": "DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'",
        "detail": "chatBuddy.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chatBuddy.urls",
        "description": "chatBuddy.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"baseApp.urls\")),\n]",
        "detail": "chatBuddy.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chatBuddy.wsgi",
        "description": "chatBuddy.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "chatBuddy.wsgi",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "djangoEnv.Scripts.activate_this",
        "description": "djangoEnv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "djangoEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatBuddy.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]